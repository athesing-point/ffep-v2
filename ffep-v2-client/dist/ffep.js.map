{
  "version": 3,
  "sources": ["../src/ffep.js"],
  "sourcesContent": ["// Constants\nconst SMARTY_WEBSITE_KEYS = {\n  PDC: \"17448046178191022\",\n  PDD: \"17448045555816402\",\n};\n\n// Simple debounce function\nfunction debounce(func, wait) {\n  let timeout;\n  return (...args) => {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => func(...args), wait);\n  };\n}\n\nclass FFEP {\n  constructor() {\n    this.form = null;\n    this.addressInput = null;\n    this.autocompleteContainer = null;\n    this.suggestions = [];\n    this.selectedIndex = -1;\n    this.isAutocompleteVisible = false;\n    this.apiCallCount = 0; // Add counter for API calls\n    // Determine which key to use based on hostname\n    const hostname = window.location.hostname;\n    this.smartyKey = hostname.includes(\".dev\") ? SMARTY_WEBSITE_KEYS.PDD : SMARTY_WEBSITE_KEYS.PDC;\n\n    // Debounce the API calls\n    this.debouncedFetchSuggestions = debounce(this.fetchSuggestions.bind(this), 300);\n  }\n\n  init() {\n    // Find the FFEP form\n    this.form = document.querySelector('form[data-ffep=\"form\"]');\n    if (!this.form) {\n      console.error(\"FFEP form not found\");\n      return;\n    }\n\n    // Find the address input\n    this.addressInput = this.form.querySelector('[data-ffep=\"address\"]');\n    if (!this.addressInput) {\n      console.error(\"Address input not found\");\n      return;\n    }\n\n    this.setupAutocomplete();\n    this.setupFormHandling();\n  }\n\n  setupAutocomplete() {\n    // Find existing autocomplete container created in Webflow\n    this.autocompleteContainer = document.querySelector(\".ffep-autocomplete\");\n    if (!this.autocompleteContainer) {\n      console.error(\"Autocomplete container with class 'ffep-autocomplete' not found\");\n      return;\n    }\n\n    /* Required Webflow styles for .ffep-autocomplete:\n     * Position: Absolute\n     * Display: None (initial state)\n     * Width: 100%\n     * Max Height: 200px\n     * Background: White\n     * Border: 1px solid #ddd\n     * Border Radius: 0 0 4px 4px\n     * Box Shadow: 0 2px 4px rgba(0,0,0,0.1)\n     * Z-Index: 1000\n     * Overflow-Y: Auto\n     *\n     * Parent container (.ffep-autocomplete's parent) needs:\n     * Position: Relative\n     */\n\n    // Setup input event listeners\n    this.addressInput.addEventListener(\"input\", this.handleInput.bind(this));\n    this.addressInput.addEventListener(\"keydown\", this.handleKeydown.bind(this));\n    document.addEventListener(\"click\", this.handleClickOutside.bind(this));\n  }\n\n  setupFormHandling() {\n    this.form.addEventListener(\"submit\", async (e) => {\n      e.preventDefault();\n\n      // Get the address and encode it properly for both parameters\n      const addressValue = this.addressInput.value;\n      const encodedAddress = encodeURIComponent(addressValue).replace(/%20/g, \"+\");\n\n      // Get the current URL to determine the TLD\n      const currentUrl = new URL(window.location.href);\n      const targetTLD = currentUrl.hostname.includes(\".dev\") ? \"dev\" : \"com\";\n\n      // Construct URL with both parameters\n      const targetUrl = `https://home.point.${targetTLD}/?Enter+your+home+address=${encodedAddress}&address=${encodedAddress}`;\n\n      // Immediately redirect without showing form submission\n      window.location.replace(targetUrl);\n    });\n  }\n\n  async handleInput(e) {\n    const query = e.target.value;\n    // console.log(\"Input value:\", query);\n    if (query.length < 3) {\n      this.hideSuggestions();\n      return;\n    }\n\n    try {\n      // Use the debounced version for API calls\n      const suggestions = await this.debouncedFetchSuggestions(query);\n      if (suggestions) {\n        // Check if suggestions were returned (might be null if debounced)\n        // console.log(\"Received suggestions:\", suggestions);\n        this.suggestions = suggestions;\n        this.showSuggestions();\n      }\n    } catch (error) {\n      // console.error(\"Error fetching suggestions:\", error);\n    }\n  }\n\n  async fetchSuggestions(query) {\n    // If query is empty or too short, don't make the API call\n    if (!query || query.length < 3) return null;\n\n    const url = `https://us-autocomplete-pro.api.smartystreets.com/lookup?${new URLSearchParams({\n      search: query,\n      key: this.smartyKey,\n      source: \"all\",\n    })}`;\n\n    this.apiCallCount++; // Increment the counter\n    console.log(`API calls made: ${this.apiCallCount}`);\n\n    const response = await fetch(url);\n    // console.log(\"Response status:\", response.status);\n\n    if (!response.ok) {\n      throw new Error(\"Failed to fetch suggestions\");\n    }\n\n    const data = await response.json();\n    // console.log(\"Raw API response:\", data);\n    return data.suggestions || [];\n  }\n\n  showSuggestions() {\n    // console.log(\"Showing suggestions:\", this.suggestions);\n    if (!this.suggestions.length) {\n      // console.log(\"No suggestions to show, hiding container\");\n      this.hideSuggestions();\n      return;\n    }\n\n    if (!this.autocompleteContainer) {\n      console.error(\"Autocomplete container is null!\");\n      return;\n    }\n\n    const html = this.suggestions\n      .map(\n        (suggestion, index) => `\n        <div class=\"ffep-suggestion ${index === this.selectedIndex ? \"selected\" : \"\"}\"\n             style=\"padding: 8px 12px; cursor: pointer; hover: background-color: #f5f5f5;\"\n             data-index=\"${index}\">\n          ${suggestion.street_line}, ${suggestion.city}, ${suggestion.state} ${suggestion.zipcode}\n        </div>\n      `\n      )\n      .join(\"\");\n\n    // console.log(\"Setting innerHTML:\", html);\n    this.autocompleteContainer.innerHTML = html;\n    // console.log(\"Setting display to block\");\n    this.autocompleteContainer.style.display = \"block\";\n    this.isAutocompleteVisible = true;\n\n    // Add click handlers to suggestions\n    this.autocompleteContainer.querySelectorAll(\".ffep-suggestion\").forEach((el) => {\n      el.addEventListener(\"click\", () => {\n        const index = parseInt(el.dataset.index);\n        this.selectSuggestion(index);\n      });\n\n      el.addEventListener(\"mouseover\", () => {\n        this.selectedIndex = parseInt(el.dataset.index);\n        this.highlightSuggestion();\n      });\n    });\n  }\n\n  hideSuggestions() {\n    this.autocompleteContainer.style.display = \"none\";\n    this.isAutocompleteVisible = false;\n    this.selectedIndex = -1;\n  }\n\n  handleKeydown(e) {\n    if (!this.isAutocompleteVisible) return;\n\n    switch (e.key) {\n      case \"ArrowDown\":\n        e.preventDefault();\n        this.selectedIndex = Math.min(this.selectedIndex + 1, this.suggestions.length - 1);\n        this.highlightSuggestion();\n        break;\n      case \"ArrowUp\":\n        e.preventDefault();\n        this.selectedIndex = Math.max(this.selectedIndex - 1, 0);\n        this.highlightSuggestion();\n        break;\n      case \"Enter\":\n        if (this.selectedIndex >= 0) {\n          e.preventDefault();\n          this.selectSuggestion(this.selectedIndex);\n        }\n        break;\n      case \"Escape\":\n        this.hideSuggestions();\n        break;\n    }\n  }\n\n  highlightSuggestion() {\n    const suggestions = this.autocompleteContainer.querySelectorAll(\".ffep-suggestion\");\n    suggestions.forEach((el, index) => {\n      el.style.backgroundColor = index === this.selectedIndex ? \"#f5f5f5\" : \"\";\n    });\n\n    // Scroll selected item into view if needed\n    if (this.selectedIndex >= 0) {\n      suggestions[this.selectedIndex].scrollIntoView({\n        block: \"nearest\",\n        behavior: \"smooth\",\n      });\n    }\n  }\n\n  selectSuggestion(index) {\n    const suggestion = this.suggestions[index];\n    this.addressInput.value = `${suggestion.street_line}, ${suggestion.city}, ${suggestion.state} ${suggestion.zipcode}`;\n    this.hideSuggestions();\n  }\n\n  handleClickOutside(e) {\n    if (!this.autocompleteContainer.contains(e.target) && e.target !== this.addressInput) {\n      this.hideSuggestions();\n    }\n  }\n}\n\n// Initialize FFEP when the DOM is ready\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  window.FFEP = FFEP; // Make FFEP available globally\n  const ffep = new FFEP();\n  ffep.init();\n});\n"],
  "mappings": "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",
  "names": []
}
